/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI;

import seleniumAutomation.flowControls;
import java.awt.Cursor;
import java.awt.Rectangle;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.awt.dnd.DragSource;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.activation.ActivationDataFlavor;
import javax.activation.DataHandler;
import javax.swing.DefaultListModel;
import javax.swing.JComponent;
import javax.swing.JList;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JToggleButton;
import javax.swing.TransferHandler;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author pmuir
 */
public class Controls extends javax.swing.JFrame {

    /**
     * Creates new form Controls
     */
    public Controls() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        contentPane = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        playButton = new javax.swing.JToggleButton();
        pauseButton = new javax.swing.JToggleButton();
        stopButton = new javax.swing.JToggleButton();
        stepButton = new javax.swing.JToggleButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        testSuite = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        testCases = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTree1.setModel(UIComponentBuilder.TestCaseTreeBuilder());
        jTree1.addTreeExpansionListener(new javax.swing.event.TreeExpansionListener() {
            public void treeCollapsed(javax.swing.event.TreeExpansionEvent evt) {
                jTree1TreeCollapsed(evt);
            }
            public void treeExpanded(javax.swing.event.TreeExpansionEvent evt) {
                jTree1TreeExpanded(evt);
            }
        });
        jTree1.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                jTree1ValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jTree1);

        playButton.setText("Play");
        playButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playButtonActionPerformed(evt);
            }
        });

        pauseButton.setText("Pause");
        pauseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pauseButtonActionPerformed(evt);
            }
        });

        stopButton.setText("Stop");
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });

        stepButton.setText("Step");
        stepButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stepButtonActionPerformed(evt);
            }
        });

        testSuite.setModel(new DefaultListModel());
        testSuite.setDragEnabled(true);
        testSuite.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                testSuiteValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(testSuite);

        testCases.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "TestSteps"
            }
        ));
        testCases.setDragEnabled(true);
        testCases.setDropMode(javax.swing.DropMode.INSERT_ROWS);
        testCases.setTransferHandler(new TableRowTransferHandler(testCases));
        addTableMenu();
        testCases.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                testCasesKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(testCases);

        javax.swing.GroupLayout contentPaneLayout = new javax.swing.GroupLayout(contentPane);
        contentPane.setLayout(contentPaneLayout);
        contentPaneLayout.setHorizontalGroup(
            contentPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contentPaneLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 193, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 285, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(contentPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(playButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(stopButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pauseButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(stepButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        contentPaneLayout.setVerticalGroup(
            contentPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 369, Short.MAX_VALUE)
            .addGroup(contentPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pauseButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(playButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(stopButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(stepButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jScrollPane3)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );

        jMenu1.setText("File");

        jMenuItem1.setText("Open");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu3.setText("Script");

        jMenuItem2.setText("Groovy Console");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem2);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(contentPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(contentPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public static JTable getTestCases() {
        return testCases;
    }

    public static JList getTestSuite() {
        return testSuite;
    }
    
    public void addTableMenu() {
        final JPopupMenu popupMenu = new JPopupMenu();
        JMenuItem deleteItem = new JMenuItem("Delete Selected Step(s)");
        deleteItem.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                int[] rows = testCases.getSelectedRows();
                for (int i = rows.length; i != 0; i--) {
                    ((DefaultTableModel) testCases.getModel()).removeRow(rows[i - 1]);
                }
                if (rows[rows.length - 1] - rows.length != testCases.getRowCount() - 1) {
                    testCases.setRowSelectionInterval(rows[rows.length - 1] - rows.length + 1, rows[rows.length - 1] - rows.length + 1);
                }
            }
        });
        popupMenu.add(deleteItem);
        
        JMenuItem newRow = new JMenuItem("Add New Step");
        newRow.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                ((DefaultTableModel) testCases.getModel()).insertRow(testCases.getSelectedRow(), new String[]{});
            }
        });
        popupMenu.add(newRow);
        testCases.setComponentPopupMenu(popupMenu);
    }

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed

    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jTree1ValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_jTree1ValueChanged
        flowControls.parseTree(evt);
        testSuite.setSelectionInterval(0, testSuite.getModel().getSize() -1);
        fixLayout();
    }//GEN-LAST:event_jTree1ValueChanged

    private void testSuiteValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_testSuiteValueChanged
        ((DefaultTableModel)testCases.getModel()).setNumRows(1);
        for (Object selected : ((JList) evt.getSource()).getSelectedValuesList()) {
            if (flowControls.testSuite.containsKey(selected)) {
                for (String step : flowControls.testSuite.get(selected)) {
                    ((javax.swing.table.DefaultTableModel) testCases.getModel()).addRow(new String[] {step});
                }
            } else {
                for (String step : flowControls.testStep) {
                    ((javax.swing.table.DefaultTableModel) testCases.getModel()).addRow(new String[] {step});
                }
            }
        }
        ((DefaultTableModel)testCases.getModel()).removeRow(0);
        if (testCases.getRowCount() > 0) {
            testCases.setRowSelectionInterval(0, testCases.getRowCount() -1);
        }
        fixLayout();
    }//GEN-LAST:event_testSuiteValueChanged

    private void jTree1TreeCollapsed(javax.swing.event.TreeExpansionEvent evt) {//GEN-FIRST:event_jTree1TreeCollapsed
        fixLayout();
    }//GEN-LAST:event_jTree1TreeCollapsed

    private void jTree1TreeExpanded(javax.swing.event.TreeExpansionEvent evt) {//GEN-FIRST:event_jTree1TreeExpanded
        fixLayout();
    }//GEN-LAST:event_jTree1TreeExpanded

    private void playButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playButtonActionPerformed
        buttonsSelected(evt);
        if (((javax.swing.JToggleButton) evt.getSource()).isSelected()) {
            if (testCases.getSelectedRowCount() == 0) {
                testCases.setRowSelectionInterval(0, testCases.getRowCount() - 1);
            }
            flowControls.runFlow();
        }
    }//GEN-LAST:event_playButtonActionPerformed

    private void pauseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pauseButtonActionPerformed
        buttonsSelected(evt);
    }//GEN-LAST:event_pauseButtonActionPerformed

    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
        buttonsSelected(evt);
    }//GEN-LAST:event_stopButtonActionPerformed

    private void stepButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stepButtonActionPerformed
        flowControls.runStep();
        buttonsSelected(evt);
    }//GEN-LAST:event_stepButtonActionPerformed

    private void testCasesKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_testCasesKeyPressed
        if (evt.getKeyCode() == 127) {
            int[] rows = testCases.getSelectedRows();
            for (int i = rows.length; i != 0; i--) {
                ((DefaultTableModel)testCases.getModel()).removeRow(rows[i - 1]);
            }
            if (rows[rows.length - 1] - rows.length != testCases.getRowCount() - 1) {
                testCases.setRowSelectionInterval(rows[rows.length - 1] - rows.length + 1, rows[rows.length - 1] - rows.length + 1);
            }
        }
    }//GEN-LAST:event_testCasesKeyPressed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        ScriptingUI script = new ScriptingUI();
        script.ide();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    public static JToggleButton getpauseButton() {
        return pauseButton;
    }

    public static JToggleButton getstopButton() {
        return stopButton;
    }

    public static JToggleButton getstepButton() {
        return stepButton;
    }

    public static JToggleButton getPlayButton() {
        return playButton;
    }

    public void buttonsSelected(java.awt.event.ActionEvent evt) {
        if (((JToggleButton)evt.getSource()).isSelected()) {
            pauseButton.setSelected(pauseButton == evt.getSource());
            playButton.setSelected(playButton == evt.getSource());
            stopButton.setSelected(stopButton == evt.getSource());
            stepButton.setSelected(stepButton == evt.getSource());
        }
    }
    

    private void fixLayout() {
        doLayout();
        revalidate();
    }

    public JPanel getContent() {
        return contentPane;
    }

    public static String getSelectedStepValue() {
        return testCases.getValueAt(testCases.getSelectedRow(),1).toString();
    }

    public static String getStepValue(int index) {
        return testCases.getValueAt(index, 0).toString();
    }
    
    public static void setSelectedVisible() {
        testCases.scrollRectToVisible(new Rectangle(testCases.getCellRect(testCases.getSelectedRow(), 0, true)));
    }

    public static void selectNextStep() {
        if (testCases.getSelectedRow() < testCases.getRowCount() -1) {
            testCases.setRowSelectionInterval(testCases.getSelectedRow() + 1,testCases.getSelectedRow() + 1);
        }
    }
    
    public static String getNextStep(int step) {
        if (step < testCases.getRowCount() -1) {
            return testCases.getValueAt(step+1, 0).toString();
        }
        return null;
    }

    public static void selectNextStep(int step) {
        if (step < testCases.getRowCount() -1) {
            testCases.setRowSelectionInterval(step + 1,step+1);
        }
    }

    public static int[] getSelectedSteps() {
        return testCases.getSelectedRows();
    }

    public static void setSelectedSteps(int[] indices) {
        testCases.clearSelection();
        for (int row:indices) {
            testCases.addRowSelectionInterval(row, row);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void launchUI() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Controls.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Controls.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Controls.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Controls.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Controls().setVisible(true);
            }
        });
    }



    public class TableRowTransferHandler extends TransferHandler {

        private final DataFlavor localObjectFlavor = new ActivationDataFlavor(Integer.class, DataFlavor.javaJVMLocalObjectMimeType, "Integer Row Index");
        private JTable table = null;

        public TableRowTransferHandler(JTable table) {
            this.table = table;
        }

        @Override
        protected Transferable createTransferable(JComponent c) {
            assert (c == table);
            return new DataHandler(new Integer(table.getSelectedRow()), localObjectFlavor.getMimeType());
        }

        @Override
        public boolean canImport(TransferHandler.TransferSupport info) {
            boolean b = info.getComponent() == table && info.isDrop() && info.isDataFlavorSupported(localObjectFlavor);
            table.setCursor(b ? DragSource.DefaultMoveDrop : DragSource.DefaultMoveNoDrop);
            return b;
        }

        @Override
        public int getSourceActions(JComponent c) {
            return TransferHandler.COPY_OR_MOVE;
        }

        @Override
        public boolean importData(TransferHandler.TransferSupport info) {
            JTable target = (JTable) info.getComponent();
            JTable.DropLocation dl = (JTable.DropLocation) info.getDropLocation();
            int index = dl.getRow();
            int max = table.getModel().getRowCount();
            if (index < 0 || index > max) {
                index = max;
            }
            target.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
            try {
                Integer rowFrom = (Integer) info.getTransferable().getTransferData(localObjectFlavor);
                ((DefaultTableModel)target.getModel()).insertRow(index, new Object[] {target.getValueAt(rowFrom, 0)});
                if (rowFrom != -1 && rowFrom != index) {
                    if (index > rowFrom) {
                        index--;
                    } else {
                        rowFrom++;
                    }
                    ((DefaultTableModel)target.getModel()).removeRow(rowFrom);
                    target.getSelectionModel().addSelectionInterval(index, index);
                    return true;
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
            return false;
        }

        @Override
        protected void exportDone(JComponent c, Transferable t, int act) {
            if (act == TransferHandler.MOVE) {
                table.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
            }
        }

    }

    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JPanel contentPane;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTree jTree1;
    private static javax.swing.JToggleButton pauseButton;
    private static javax.swing.JToggleButton playButton;
    private static javax.swing.JToggleButton stepButton;
    private static javax.swing.JToggleButton stopButton;
    private static javax.swing.JTable testCases;
    private static javax.swing.JList testSuite;
    // End of variables declaration//GEN-END:variables
}
